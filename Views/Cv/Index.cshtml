@model MyPortfolio.Models.CvModel
@{
    ViewData["Title"] = "My CV";
}

<div class="cv-page">
@if (Model != null)
{
    <div class="cv-header mb-5">
        <div>
            <h1 class="fw-bold mb-1">Curriculum Vitae</h1>
        </div>
        <div class="ms-auto">
            <a asp-action="Download" asp-route-id="@Model.Id" class="contact btn">Download PDF</a>
            @* <a asp-action="Upload" class="contact btn">Upload New</a> *@
        </div>
    </div>

    <div class="cv-viewer">
        <div id="cvLoading" class="cv-loading">Loading CV…</div>
        <div id="cvCanvasHost" class="cv-canvas-host"></div>
    </div>

}
else
{
    <div class="alert alert-info mb-0">
        No CV uploaded yet.
        <a asp-action="Upload" class="alert-link">Upload one now</a>.
    </div>
}
</div>

@section Scripts {
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
<script>
(async function () {
  const host   = document.getElementById('cvCanvasHost');
  const loader = document.getElementById('cvLoading');
  const url    = '@Url.Action("ViewPdf", new { id = Model.Id })';

  // Use the CDN worker
  pdfjsLib.GlobalWorkerOptions.workerSrc =
    "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js";

  // Tuning knobs
  const MAX_DPR = 3;                               // cap DPR to avoid memory spikes
  const DPR = Math.min(MAX_DPR, window.devicePixelRatio || 1);
  const QUALITY_BOOST = 1.15;                       // slight extra scale for readability

  function innerWidth(el){
    const cs = getComputedStyle(el);
    return el.clientWidth - parseFloat(cs.paddingLeft) - parseFloat(cs.paddingRight);
  }

  async function renderPdf(pdf) {
    host.innerHTML = "";
    const inner = Math.max(1, innerWidth(host));

    for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
      const page = await pdf.getPage(pageNum);

      // Base "fit to width" scale in CSS pixels
      const unscaled = page.getViewport({ scale: 1 });
      const cssScale = (inner / unscaled.width) * QUALITY_BOOST;
      const cssViewport = page.getViewport({ scale: cssScale });

      // Canvas element sized in **CSS pixels**
      const canvas = document.createElement('canvas');
      canvas.style.width  = Math.round(cssViewport.width)  + 'px';
      canvas.style.height = Math.round(cssViewport.height) + 'px';
      canvas.style.display = 'block';
      canvas.style.margin  = '0 auto 16px';
      canvas.style.background = '#fff';

      // Backing store sized in **device pixels** for crispness
      canvas.width  = Math.round(cssViewport.width  * DPR);
      canvas.height = Math.round(cssViewport.height * DPR);

      const ctx = canvas.getContext('2d', { alpha: false });
      // Render with DPR transform (so pixels map 1:1 on retina)
      await page.render({
        canvasContext: ctx,
        viewport: cssViewport,
        transform: [DPR, 0, 0, DPR, 0, 0]
      }).promise;

      host.appendChild(canvas);
    }
  }

  try {
    const pdf = await pdfjsLib.getDocument({ url }).promise;
    await renderPdf(pdf);
    if (loader) loader.style.display = 'none';

    // Re-render on resize (debounced)
    let t;
    window.addEventListener('resize', () => {
      clearTimeout(t);
      t = setTimeout(() => renderPdf(pdf), 150);
    });
  } catch (err) {
    console.error('PDF render failed:', err);
    if (loader) loader.innerHTML =
      `Could not display the CV. <a class="contact btn ms-2" href="${url}" target="_blank" rel="noopener">Open PDF</a>`;
  }
})();
</script>
}
