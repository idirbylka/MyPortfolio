@model MyPortfolio.Models.CvModel
@{
    ViewData["Title"] = "My CV";
}

<div class="cv-page">
@if (Model != null)
{
    <div class="cv-header mb-5">
        <div>
            <h1 class="fw-bold mb-1">Curriculum Vitae</h1>
        </div>
        <div class="ms-auto">
            <a asp-action="Download" asp-route-id="@Model.Id" class="contact btn">Download PDF</a>
            @* <a asp-action="Upload" class="contact btn">Upload New</a> *@
        </div>
    </div>

    <div class="cv-viewer">
        <div id="cvLoading" class="cv-loading">Loading CV…</div>
        <div id="cvCanvasHost" class="cv-canvas-host"></div>
    </div>

}
else
{
    <div class="alert alert-info mb-0">
        No CV uploaded yet.
        <a asp-action="Upload" class="alert-link">Upload one now</a>.
    </div>
}
</div>

@section Scripts {
<!-- Load pdf.js from CDN -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
<script>
  (async function () {
    const host   = document.getElementById('cvCanvasHost');
    const loader = document.getElementById('cvLoading');
    const url    = '@Url.Action("ViewPdf", new { id = Model.Id })';

    // Point worker to the same version on CDN (avoids 404s from /lib/pdfjs/*)
    if (window.pdfjsLib) {
      pdfjsLib.GlobalWorkerOptions.workerSrc =
        "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js";
    }

    // Helper to render (called on load + resize)
    async function renderPdf(pdf) {
      host.innerHTML = "";
      for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
        const page = await pdf.getPage(pageNum);
        const viewport = page.getViewport({ scale: 1 });
        const scale = host.clientWidth / viewport.width;     // fit to width
        const vp = page.getViewport({ scale });

        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d', { alpha: false });
        canvas.width = Math.floor(vp.width);
        canvas.height = Math.floor(vp.height);
        canvas.style.background = '#fff';
        canvas.style.display = 'block';
        canvas.style.margin = '0 auto 16px';

        await page.render({ canvasContext: ctx, viewport: vp }).promise;
        host.appendChild(canvas);
      }
    }

    try {
      if (!window.pdfjsLib) throw new Error("pdfjsLib failed to load");
      const loadingTask = pdfjsLib.getDocument({ url });
      const pdf = await loadingTask.promise;

      await renderPdf(pdf);
      if (loader) loader.style.display = 'none';

      // Re-render on resize (debounced)
      let tid;
      window.addEventListener('resize', () => {
        clearTimeout(tid);
        tid = setTimeout(() => renderPdf(pdf), 150);
      });
    } catch (err) {
      console.error("PDF render failed:", err);
      // Show a friendly fallback with a direct link
      if (loader) {
        loader.innerHTML = `
          Could not display the CV here.
          <a class="contact btn ms-2" href="${url}" target="_blank" rel="noopener">Open PDF</a>`;
      }
    }
  })();
</script>
}
